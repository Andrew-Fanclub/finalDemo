# -*- coding: utf-8 -*-
"""BeautifulSoup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ap9miuQ1NirP5V_4d5mRcliZUlATopd
"""

from urllib.request import urlopen as ureq
from bs4 import BeautifulSoup as soup

def convert_soup(url):
  # Pass search url into urllib and store result in html_content
  uclient = ureq(url)
  html_content = uclient.read()
  uclient.close()

  # Parse html content and convert to soup format
  h_soup = soup(html_content, "html.parser")

  return h_soup

def scrape_frys(searchQ):
  search_req = "https://www.frys.com/search?isFSK=true&cat=&query_string=" + searchQ

  return convert_soup(search_req)

def scrape_mem(searchQ):
  search_req = "https://www.memoryc.com/search.html?q=" + searchQ + "&Submit=Submit"

  return convert_soup(search_req)

def scrape_micro(searchQ):
  search_req = "https://www.microcenter.com/search/search_results.aspx?N=&cat=&Ntt="+ searchQ +"&searchButton=search"

  return convert_soup(search_req)

#Web scraping for frys
search_frys = scrape_frys("ram")
containers_frys = search_frys.find_all("div", {"class": "prodCol"})
titles_frys = []
prices_frys = []

for container_frys in containers_frys:
    name_frys = container_frys.find("p", {"class": "font_reg", "id": "prodDescp"}).find("a")

    if name_frys != None:
      titles_frys.append(name_frys.text)
    else:
      titles_frys.append("N/A") 

    price_frys = container_frys.find("div", {"class": "price-details-info"})
    price_frys = price_frys.find("span", {"class": "net-total"})
    
    if price_frys != None:
      prices_frys.append(price_frys.text)
    else:
      prices_frys.append("N/A")

#print to check
for i in range(len(titles_frys)):
    print(titles_frys[i])
    print(prices_frys[i])

#images for frys
# containers_img_frys = scrape_frys("laptop")

containers_imgs_frys = search_frys.findAll("div",{"id":"prodImg"})
images_frys = []
for i in range(len(titles_frys)):
  img_frys = containers_imgs_frys[i].img
  img_frys_link = img_frys['src']

  if img_frys_link != None:
    images_frys.append(img_frys_link)
  else:
    images_frys.append("https://i.imgur.com/W24Dv42.png")

#print to check

for i in range(len(titles_frys)):
  print(images_frys[i])

#Web scraping for memoryc
search_mem = scrape_mem("ram")
containers_mem = search_mem.find_all("div", {"class": "categoryProduct forCartImageItem"})
titles_mem = []
prices_mem = []

for container_mem in containers_mem:
  name_mem = container_mem.find("div", {"class": "center"})

  if name_mem != None:
    titles_mem.append(name_mem.text)
  else:
      titles_mem.append("N/A")  

  price_mem = container_mem.find("div", {"class": "price"})

  if price_mem != None:
      prices_mem.append(price_mem.text)
  else:
      prices_mem.append("N/A")

#print to check

for i in range(len(titles_mem)):
  print(titles_mem[i])
  print(prices_mem[i])

#images for memoryc

containers_img_mem = search_mem.findAll("div", {"class": "left"})
images_mem = []

for i in range(len(titles_mem)):
  img_mem = containers_img_mem[i].img
  img_mem_link = img_mem['data-original']
  images_mem.append(img_mem_link)

  if img_mem_link != None:
    images_mem.append(img_mem_link)
  else:
    images_mem.append("https://i.imgur.com/W24Dv42.png")

# print to check

for i in range(len(titles_mem)):
  print(images_mem[i])

#Web scraping for microcenter
search_micro = scrape_micro("ram")
containers_micro = search_micro.find_all("div", {"class": "details"})
titles_micro = []
prices_micro = []

for container_micro in containers_micro:
  name_micro = container_micro.find("div", {"class": "pDescription compressedNormal2"})

  if name_micro != None:
    titles_micro.append(name_micro.text)
  else:
      titles_micro.append("N/A") 

  price_micro = container_micro.find("span", {"itemprop": "price"})

  if price_micro != None:
      prices_micro.append(price_micro.text)
  else:
      prices_micro.append("N/A")

#print to check

for i in range(len(titles_micro)):
  print(titles_micro[i])
  print(prices_micro[i])

#images for microcenter

containers_imgs_micro = search_micro.findAll("a", {"class": "image"})
images_micro = []

for i in range(len(titles_micro)):
  img_micro = containers_imgs_micro[i].img
  img_micro_link = img_micro['src']
  images_micro.append(img_micro_link)

  if img_micro_link != None:
    images_micro.append(img_micro_link)
  else:
    images_micro.append("https://i.imgur.com/W24Dv42.png")

#print to check

for i in range(len(titles_micro)):
  print(images_micro[i])

def compare()

def compare_product(product):
  # Compare against microcenter
  product = product.replace(" ","+")
  #micro_url = "https://www.bestbuy.com/site/computers-pcs/computer-cards-components/abcat0507000.c?id=abcat0507000"
  micro_url = "https://www.microcenter.com/search/search_results.aspx?N=&cat=&Ntt="+ product +"&searchButton=search"

  micro_soup = convert_soup(micro_url)

  containers = micro_soup.findAll("div",{"class":"details"})
  
  price = containers[0].findAll("span", {"itemprop":"price"})[0].text
  print(price)


compare_product("MSI GL65 Leopard 10SCSR-070")

#Find image source
# frys_laptop = scrape_frys("laptop")

# containers = frys_laptop.findAll("div",{"id":"prodImg"})
# print(containers)

# img = containers[0].img
# img_hyperlink = img["src"]
# print(img_hyperlink)

# Param: string - searchQ
# Returns soup object
def scrape_newegg(searchQ):
  search_req = "https://www.newegg.com/p/pl?d=" + searchQ

  return convert_soup(search_req)

laptop = scrape_newegg("laptop")
print(laptop)

# laptop.prettify()

# gets each product
containers = laptop.findAll("div",{"class":"item-container"})

first_product = containers[0]

# Looks at first title
# Note: this is treated as an array with a size of 1
first_title = first_product.findAll("a", {"class":"item-title"})

# Print title and pricing
price_dollar = first_product.findAll("li",{"class":"price-current"})[0].strong.text
price_cents = first_product.findAll("li",{"class":"price-current"})[0].sup.text

# Original Price
price_was = first_product.findAll("li",{"class":"price-was"})[0].text

# Saving percent
percent = first_product.findAll("span",{"class":"price-save-percent"})[0].text

# Shipping cost
shipping = first_product.findAll("li",{"class":"price-ship"})[0].text

print(first_title[0].text)
print("Price was: " + price_was)
print("Price now: " + price_dollar + price_cents)
print("You save: " + percent)
print("Shipping cost: " + shipping)

search = scrape_frys("ram")
containers_frys = search.find_all("div", {"class": "prodCol"})
# # imgs = []

titles_frys = []
prices_frys = []

for container_frys in containers_frys:
    name_frys = container_frys.find("p", {"class": "font_reg", "id": "prodDescp"}).find("a")
    titles_frys.append(name_frys.text)

    price_frys = container_frys.find("div", {"class": "price-details-info"})
    price_frys = price_frys.find("span", {"class": "net-total"})
    
    if price_frys != None:
      prices_frys.append(price_frys.text)
    else:
      prices_frys.append("N/A")

for i in range(len(titles_frys)):
    print(titles_frys[i])
    print(prices_frys[i])

soup = get_frys_link('laptop')
containers = soup.find_all("div", {"class": "prodCol"})
entries = []

def get_frys_entry(entry):
    title = "N/A"
    price = "N/A"
    price_was = "N/A"
    percent = "N/A"

    raw_title = entry.find("p", {"class": "font_reg", "id": "prodDescp"}).find("a")
    if raw_title != None:
      raw_title = raw_title.find("a")

    price_frys = entry.find("div", {"class": "price-details-info"})
    if raw_title == None:
      print("Uh oh. Stinky")
      return

    price_current_frys = price_frys.find("span", {"id": "did_price1valuediv"})

    price_old_frys = price_frys.find("span", {"id": "did_price2valuediv"}).find("s")
    if price_old_frys != None:
      price_old_frys = price_old_frys.find("s")
    
    if price_current_frys != None:
        price = price_frys.text.strip()
    
    if price_old_frys != None:
        price_was = price_old_frys.text.strip()

    if raw_title != None:
        title = raw_title.text.strip()

    if price_current_frys != None and price_old_frys != None:
        #percent = str(float(price) / float(price_was))
        pass

    shipping = str(0)
	
    print(title)
    print(price)
    print(price_was)
    print(percent)
    print(shipping)

for container_frys in containers:
      get_frys_entry(container_frys)
      print("\n")